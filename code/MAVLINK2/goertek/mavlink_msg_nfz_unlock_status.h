#pragma once
// MESSAGE NFZ_UNLOCK_STATUS PACKING

#define MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS 4010


typedef struct __mavlink_nfz_unlock_status_t {
 uint32_t uuid_verified; /*<  uuid generated by the no-fly zone unlock key, to be verified.*/
 uint32_t time_limit; /*< [s] time limit generated by the no-fly zone unlock key, timestamp since 1.1.1970.*/
 uint32_t board_uuid_h; /*<  the last 32bit board id number provided by hardware.*/
 uint8_t status; /*<  unlock status 0: no unlock, 1: unlock success, 2: unlock success but the gps time is unknown, 3: unlock fail, the time limit is over, 4: unlock fail, the key is incorrect, 5: clear the saved unlock key is successful.*/
} mavlink_nfz_unlock_status_t;

#define MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_LEN 13
#define MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_MIN_LEN 13
#define MAVLINK_MSG_ID_4010_LEN 13
#define MAVLINK_MSG_ID_4010_MIN_LEN 13

#define MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_CRC 157
#define MAVLINK_MSG_ID_4010_CRC 157



#if MAVLINK_COMMAND_24BIT
#define MAVLINK_MESSAGE_INFO_NFZ_UNLOCK_STATUS { \
    4010, \
    "NFZ_UNLOCK_STATUS", \
    4, \
    {  { "status", NULL, MAVLINK_TYPE_UINT8_T, 0, 12, offsetof(mavlink_nfz_unlock_status_t, status) }, \
         { "uuid_verified", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_nfz_unlock_status_t, uuid_verified) }, \
         { "time_limit", NULL, MAVLINK_TYPE_UINT32_T, 0, 4, offsetof(mavlink_nfz_unlock_status_t, time_limit) }, \
         { "board_uuid_h", NULL, MAVLINK_TYPE_UINT32_T, 0, 8, offsetof(mavlink_nfz_unlock_status_t, board_uuid_h) }, \
         } \
}
#else
#define MAVLINK_MESSAGE_INFO_NFZ_UNLOCK_STATUS { \
    "NFZ_UNLOCK_STATUS", \
    4, \
    {  { "status", NULL, MAVLINK_TYPE_UINT8_T, 0, 12, offsetof(mavlink_nfz_unlock_status_t, status) }, \
         { "uuid_verified", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_nfz_unlock_status_t, uuid_verified) }, \
         { "time_limit", NULL, MAVLINK_TYPE_UINT32_T, 0, 4, offsetof(mavlink_nfz_unlock_status_t, time_limit) }, \
         { "board_uuid_h", NULL, MAVLINK_TYPE_UINT32_T, 0, 8, offsetof(mavlink_nfz_unlock_status_t, board_uuid_h) }, \
         } \
}
#endif

/**
 * @brief Pack a nfz_unlock_status message
 * @param system_id ID of this system
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 *
 * @param status  unlock status 0: no unlock, 1: unlock success, 2: unlock success but the gps time is unknown, 3: unlock fail, the time limit is over, 4: unlock fail, the key is incorrect, 5: clear the saved unlock key is successful.
 * @param uuid_verified  uuid generated by the no-fly zone unlock key, to be verified.
 * @param time_limit [s] time limit generated by the no-fly zone unlock key, timestamp since 1.1.1970.
 * @param board_uuid_h  the last 32bit board id number provided by hardware.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_nfz_unlock_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t status, uint32_t uuid_verified, uint32_t time_limit, uint32_t board_uuid_h)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    char buf[MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_LEN];
    _mav_put_uint32_t(buf, 0, uuid_verified);
    _mav_put_uint32_t(buf, 4, time_limit);
    _mav_put_uint32_t(buf, 8, board_uuid_h);
    _mav_put_uint8_t(buf, 12, status);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_LEN);
#else
    mavlink_nfz_unlock_status_t packet;
    packet.uuid_verified = uuid_verified;
    packet.time_limit = time_limit;
    packet.board_uuid_h = board_uuid_h;
    packet.status = status;

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_LEN);
#endif

    msg->msgid = MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS;
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_MIN_LEN, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_LEN, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_CRC);
}

/**
 * @brief Pack a nfz_unlock_status message on a channel
 * @param system_id ID of this system
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param chan The MAVLink channel this message will be sent over
 * @param msg The MAVLink message to compress the data into
 * @param status  unlock status 0: no unlock, 1: unlock success, 2: unlock success but the gps time is unknown, 3: unlock fail, the time limit is over, 4: unlock fail, the key is incorrect, 5: clear the saved unlock key is successful.
 * @param uuid_verified  uuid generated by the no-fly zone unlock key, to be verified.
 * @param time_limit [s] time limit generated by the no-fly zone unlock key, timestamp since 1.1.1970.
 * @param board_uuid_h  the last 32bit board id number provided by hardware.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_nfz_unlock_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t status,uint32_t uuid_verified,uint32_t time_limit,uint32_t board_uuid_h)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    char buf[MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_LEN];
    _mav_put_uint32_t(buf, 0, uuid_verified);
    _mav_put_uint32_t(buf, 4, time_limit);
    _mav_put_uint32_t(buf, 8, board_uuid_h);
    _mav_put_uint8_t(buf, 12, status);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_LEN);
#else
    mavlink_nfz_unlock_status_t packet;
    packet.uuid_verified = uuid_verified;
    packet.time_limit = time_limit;
    packet.board_uuid_h = board_uuid_h;
    packet.status = status;

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_LEN);
#endif

    msg->msgid = MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_MIN_LEN, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_LEN, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_CRC);
}

/**
 * @brief Encode a nfz_unlock_status struct
 *
 * @param system_id ID of this system
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param nfz_unlock_status C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_nfz_unlock_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_nfz_unlock_status_t* nfz_unlock_status)
{
    return mavlink_msg_nfz_unlock_status_pack(system_id, component_id, msg, nfz_unlock_status->status, nfz_unlock_status->uuid_verified, nfz_unlock_status->time_limit, nfz_unlock_status->board_uuid_h);
}

/**
 * @brief Encode a nfz_unlock_status struct on a channel
 *
 * @param system_id ID of this system
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param chan The MAVLink channel this message will be sent over
 * @param msg The MAVLink message to compress the data into
 * @param nfz_unlock_status C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_nfz_unlock_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_nfz_unlock_status_t* nfz_unlock_status)
{
    return mavlink_msg_nfz_unlock_status_pack_chan(system_id, component_id, chan, msg, nfz_unlock_status->status, nfz_unlock_status->uuid_verified, nfz_unlock_status->time_limit, nfz_unlock_status->board_uuid_h);
}

/**
 * @brief Send a nfz_unlock_status message
 * @param chan MAVLink channel to send the message
 *
 * @param status  unlock status 0: no unlock, 1: unlock success, 2: unlock success but the gps time is unknown, 3: unlock fail, the time limit is over, 4: unlock fail, the key is incorrect, 5: clear the saved unlock key is successful.
 * @param uuid_verified  uuid generated by the no-fly zone unlock key, to be verified.
 * @param time_limit [s] time limit generated by the no-fly zone unlock key, timestamp since 1.1.1970.
 * @param board_uuid_h  the last 32bit board id number provided by hardware.
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_nfz_unlock_status_send(mavlink_channel_t chan, uint8_t status, uint32_t uuid_verified, uint32_t time_limit, uint32_t board_uuid_h)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    char buf[MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_LEN];
    _mav_put_uint32_t(buf, 0, uuid_verified);
    _mav_put_uint32_t(buf, 4, time_limit);
    _mav_put_uint32_t(buf, 8, board_uuid_h);
    _mav_put_uint8_t(buf, 12, status);

    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS, buf, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_MIN_LEN, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_LEN, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_CRC);
#else
    mavlink_nfz_unlock_status_t packet;
    packet.uuid_verified = uuid_verified;
    packet.time_limit = time_limit;
    packet.board_uuid_h = board_uuid_h;
    packet.status = status;

    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS, (const char *)&packet, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_MIN_LEN, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_LEN, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_CRC);
#endif
}

/**
 * @brief Send a nfz_unlock_status message
 * @param chan MAVLink channel to send the message
 * @param struct The MAVLink struct to serialize
 */
static inline void mavlink_msg_nfz_unlock_status_send_struct(mavlink_channel_t chan, const mavlink_nfz_unlock_status_t* nfz_unlock_status)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    mavlink_msg_nfz_unlock_status_send(chan, nfz_unlock_status->status, nfz_unlock_status->uuid_verified, nfz_unlock_status->time_limit, nfz_unlock_status->board_uuid_h);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS, (const char *)nfz_unlock_status, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_MIN_LEN, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_LEN, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_CRC);
#endif
}

#if MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_LEN <= MAVLINK_MAX_PAYLOAD_LEN
/*
  This variant of _send() can be used to save stack space by re-using
  memory from the receive buffer.  The caller provides a
  mavlink_message_t which is the size of a full mavlink message. This
  is usually the receive buffer for the channel, and allows a reply to an
  incoming message with minimum stack space usage.
 */
static inline void mavlink_msg_nfz_unlock_status_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan,  uint8_t status, uint32_t uuid_verified, uint32_t time_limit, uint32_t board_uuid_h)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    char *buf = (char *)msgbuf;
    _mav_put_uint32_t(buf, 0, uuid_verified);
    _mav_put_uint32_t(buf, 4, time_limit);
    _mav_put_uint32_t(buf, 8, board_uuid_h);
    _mav_put_uint8_t(buf, 12, status);

    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS, buf, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_MIN_LEN, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_LEN, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_CRC);
#else
    mavlink_nfz_unlock_status_t *packet = (mavlink_nfz_unlock_status_t *)msgbuf;
    packet->uuid_verified = uuid_verified;
    packet->time_limit = time_limit;
    packet->board_uuid_h = board_uuid_h;
    packet->status = status;

    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS, (const char *)packet, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_MIN_LEN, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_LEN, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_CRC);
#endif
}
#endif

#endif

// MESSAGE NFZ_UNLOCK_STATUS UNPACKING


/**
 * @brief Get field status from nfz_unlock_status message
 *
 * @return  unlock status 0: no unlock, 1: unlock success, 2: unlock success but the gps time is unknown, 3: unlock fail, the time limit is over, 4: unlock fail, the key is incorrect, 5: clear the saved unlock key is successful.
 */
static inline uint8_t mavlink_msg_nfz_unlock_status_get_status(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint8_t(msg,  12);
}

/**
 * @brief Get field uuid_verified from nfz_unlock_status message
 *
 * @return  uuid generated by the no-fly zone unlock key, to be verified.
 */
static inline uint32_t mavlink_msg_nfz_unlock_status_get_uuid_verified(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg,  0);
}

/**
 * @brief Get field time_limit from nfz_unlock_status message
 *
 * @return [s] time limit generated by the no-fly zone unlock key, timestamp since 1.1.1970.
 */
static inline uint32_t mavlink_msg_nfz_unlock_status_get_time_limit(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg,  4);
}

/**
 * @brief Get field board_uuid_h from nfz_unlock_status message
 *
 * @return  the last 32bit board id number provided by hardware.
 */
static inline uint32_t mavlink_msg_nfz_unlock_status_get_board_uuid_h(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg,  8);
}

/**
 * @brief Decode a nfz_unlock_status message into a struct
 *
 * @param msg The message to decode
 * @param nfz_unlock_status C-struct to decode the message contents into
 */
static inline void mavlink_msg_nfz_unlock_status_decode(const mavlink_message_t* msg, mavlink_nfz_unlock_status_t* nfz_unlock_status)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    nfz_unlock_status->uuid_verified = mavlink_msg_nfz_unlock_status_get_uuid_verified(msg);
    nfz_unlock_status->time_limit = mavlink_msg_nfz_unlock_status_get_time_limit(msg);
    nfz_unlock_status->board_uuid_h = mavlink_msg_nfz_unlock_status_get_board_uuid_h(msg);
    nfz_unlock_status->status = mavlink_msg_nfz_unlock_status_get_status(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_LEN? msg->len : MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_LEN;
        memset(nfz_unlock_status, 0, MAVLINK_MSG_ID_NFZ_UNLOCK_STATUS_LEN);
    memcpy(nfz_unlock_status, _MAV_PAYLOAD(msg), len);
#endif
}
